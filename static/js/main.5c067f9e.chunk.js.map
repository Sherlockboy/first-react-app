{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","Card","Text","key","style","position","text","icon","right","cursor","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","itemList","handleInput","bind","addItem","e","this","setState","target","value","Date","now","preventDefault","newItem","console","log","date","filteredItems","filter","width","marginRight","marginLeft","marginTop","border","Header","backgroundColor","borderBottom","id","onSubmit","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","onChange","Append","Button","variant","type","Body","Title","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mVAsBeA,MAff,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OAAQ,kBAACC,EAAA,EAAKC,KAAN,CAAWC,IAAKH,EAAKG,IAAKC,MAAO,CAAEC,SAAS,aACvCL,EAAKM,KACN,kBAAC,IAAD,CAAiBC,KAAK,QAAQH,MAAO,CAAEC,SAAS,WAAYG,MAAM,OAAQC,OAAO,WACjFC,QAAS,kBAAId,EAAMe,WAAWX,EAAKG,YAGnD,OACI,kBAAC,IAAD,CAAUS,SAAU,IAAKC,OAAO,eAAehB,I,eCTvDiB,IAAQC,IAAIC,K,IAwEGC,E,kDArEb,WAAYrB,GAAO,IAAD,8BAChB,cAAMA,IACDsB,MAAM,CACTC,SAAS,GACTnB,KAAK,CACHM,KAAK,GACLH,IAAI,KAGR,EAAKiB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAXF,E,wDAaNE,GACVC,KAAKC,SAAS,CACZzB,KAAK,CACHM,KAAMiB,EAAEG,OAAOC,MACfxB,IAAKyB,KAAKC,W,8BAIRN,GACNA,EAAEO,iBACF,IAAMC,EAAUP,KAAKN,MAAMlB,KAC3BgC,QAAQC,IAAIF,GACC,KAAVA,GACDP,KAAKC,SAAS,CACZN,SAAS,GAAD,mBAAMK,KAAKN,MAAMC,UAAjB,CAA2BY,IACnC/B,KAAK,CACHM,KAAK,GACL4B,KAAK,Q,iCAKF/B,GACT,IAAMgC,EAAgBX,KAAKN,MAAMC,SAASiB,QAAO,SAAApC,GAAI,OAAIA,EAAKG,MAAMA,KACpEqB,KAAKC,SAAS,CACZN,SAAUgB,M,+BAIZ,OACI,kBAAClC,EAAA,EAAD,CAAMG,MAAO,CAACiC,MAAM,MAAOC,YAAY,OAAQC,WAAW,OAAQC,UAAU,QAASC,OAAO,wBAC1F,kBAACxC,EAAA,EAAKyC,OAAN,CAAatC,MAAO,CAAEuC,gBAAgB,UAAWC,aAAa,wBAC5D,0BAAMC,GAAG,QAAQC,SAAUtB,KAAKF,SAC9B,kBAACyB,EAAA,EAAD,CAAYC,UAAU,QACpB,kBAACC,EAAA,EAAD,CACEC,YAAY,iBACZC,aAAW,YACXC,mBAAiB,eACjBzB,MAAOH,KAAKN,MAAMlB,KAAKM,KACvB+C,SAAU7B,KAAKJ,cAEjB,kBAAC2B,EAAA,EAAWO,OAAZ,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,UAA/B,WAKR,kBAACxD,EAAA,EAAKyD,KAAN,CAAWtD,MAAO,CAAEuC,gBAAgB,YAClC,kBAAC1C,EAAA,EAAK0D,MAAN,0BACA,kBAAC,EAAD,CAAW7D,MAAO0B,KAAKN,MAAMC,SAAUR,WAAYa,KAAKb,mB,GA/DlDiD,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.5c067f9e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Card} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    const listItems = items.map(item=>{\r\n        return  <Card.Text key={item.key} style={{ position:'relative'}}>\r\n                    {item.text}\r\n                    <FontAwesomeIcon icon=\"trash\" style={{ position:'absolute', right:'10px', cursor:'pointer'}}\r\n                    onClick={()=>props.deleteItem(item.key)}/>\r\n                </Card.Text>\r\n    })\r\n    return(\r\n        <FlipMove duration={500} easing=\"ease-in-out\">{listItems}</FlipMove>\r\n        \r\n    )\r\n}\r\n\r\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Card, Button, InputGroup, FormControl} from \"react-bootstrap\";\nimport ListItems from './ListItems';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      itemList:[],\n      item:{\n        text:'',\n        key:''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n  }\n  handleInput(e){\n    this.setState({\n      item:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.item;\n    console.log(newItem);\n    if(newItem!==''){\n      this.setState({\n        itemList: [...this.state.itemList, newItem],\n        item:{\n          text:'',\n          date:''\n        }\n      })\n    }\n  }\n  deleteItem(key){\n    const filteredItems = this.state.itemList.filter(item => item.key!==key);\n    this.setState({\n      itemList: filteredItems\n    })\n  }\n  render(){\n    return (\n        <Card style={{width:'30%', marginRight:'auto', marginLeft:'auto', marginTop:'100px', border:'1.5px solid #f9f6f7'}}>\n          <Card.Header style={{ backgroundColor:'#3c4f65', borderBottom:'1.5px solid #f9f6f7'}}>\n            <form id=\"to-do\" onSubmit={this.addItem}>\n              <InputGroup className=\"my-3\">\n                <FormControl\n                  placeholder=\"enter new task\"\n                  aria-label=\"Task name\"\n                  aria-describedby=\"basic-addon2\"\n                  value={this.state.item.text}\n                  onChange={this.handleInput}\n                />\n                <InputGroup.Append>\n                  <Button variant=\"success\" type=\"submit\">add</Button>\n                </InputGroup.Append>\n              </InputGroup>\n            </form>\n          </Card.Header>\n          <Card.Body style={{ backgroundColor:'#393e46'}}>\n            <Card.Title>Tasks on the list</Card.Title>\n            <ListItems items={this.state.itemList} deleteItem={this.deleteItem}></ListItems>\n          </Card.Body>\n        </Card>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}